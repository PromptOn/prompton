# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.bad_request_error import BadRequestError
from ...errors.not_found_error import NotFoundError
from ...errors.unauthorized_error import UnauthorizedError
from ...errors.unprocessable_entity_error import UnprocessableEntityError
from ...types.chat_gpt_chat_completition_config import ChatGptChatCompletitionConfig
from ...types.chat_gpt_message import ChatGptMessage
from ...types.default_post_response import DefaultPostResponse
from ...types.prompt_version_providers import PromptVersionProviders
from ...types.prompt_version_read import PromptVersionRead
from ...types.prompt_version_status import PromptVersionStatus

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PromptVersionsClient:
    def __init__(self, *, environment: str, token: typing.Optional[str] = None):
        self._environment = environment
        self._token = token

    def get_prompt_versions_list(self, *, prompt_id: typing.Optional[str] = None) -> typing.List[PromptVersionRead]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "promptVersions"),
            params={"prompt_id": prompt_id},
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[PromptVersionRead], _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_prompt_version(
        self,
        *,
        status: typing.Optional[PromptVersionStatus] = OMIT,
        provider: typing.Optional[PromptVersionProviders] = OMIT,
        name: str,
        description: typing.Optional[str] = OMIT,
        prompt_id: str,
        template: typing.Optional[typing.List[ChatGptMessage]] = OMIT,
        model_config: typing.Optional[ChatGptChatCompletitionConfig] = OMIT,
    ) -> DefaultPostResponse:
        _request: typing.Dict[str, typing.Any] = {"name": name, "prompt_id": prompt_id}
        if status is not OMIT:
            _request["status"] = status
        if provider is not OMIT:
            _request["provider"] = provider
        if description is not OMIT:
            _request["description"] = description
        if template is not OMIT:
            _request["template"] = template
        if model_config is not OMIT:
            _request["model_config"] = model_config
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "promptVersions"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DefaultPostResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_prompt_version_by_id(self, id: str) -> PromptVersionRead:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"promptVersions/{id}"),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PromptVersionRead, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_prompt_version(
        self,
        id: str,
        *,
        status: typing.Optional[PromptVersionStatus] = OMIT,
        provider: typing.Optional[PromptVersionProviders] = OMIT,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        prompt_id: typing.Optional[str] = OMIT,
        template: typing.Optional[typing.List[ChatGptMessage]] = OMIT,
        model_config: typing.Optional[ChatGptChatCompletitionConfig] = OMIT,
    ) -> PromptVersionRead:
        _request: typing.Dict[str, typing.Any] = {}
        if status is not OMIT:
            _request["status"] = status
        if provider is not OMIT:
            _request["provider"] = provider
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        if prompt_id is not OMIT:
            _request["prompt_id"] = prompt_id
        if template is not OMIT:
            _request["template"] = template
        if model_config is not OMIT:
            _request["model_config"] = model_config
        _response = httpx.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._environment}/", f"promptVersions/{id}"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PromptVersionRead, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPromptVersionsClient:
    def __init__(self, *, environment: str, token: typing.Optional[str] = None):
        self._environment = environment
        self._token = token

    async def get_prompt_versions_list(
        self, *, prompt_id: typing.Optional[str] = None
    ) -> typing.List[PromptVersionRead]:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", "promptVersions"),
                params={"prompt_id": prompt_id},
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[PromptVersionRead], _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_prompt_version(
        self,
        *,
        status: typing.Optional[PromptVersionStatus] = OMIT,
        provider: typing.Optional[PromptVersionProviders] = OMIT,
        name: str,
        description: typing.Optional[str] = OMIT,
        prompt_id: str,
        template: typing.Optional[typing.List[ChatGptMessage]] = OMIT,
        model_config: typing.Optional[ChatGptChatCompletitionConfig] = OMIT,
    ) -> DefaultPostResponse:
        _request: typing.Dict[str, typing.Any] = {"name": name, "prompt_id": prompt_id}
        if status is not OMIT:
            _request["status"] = status
        if provider is not OMIT:
            _request["provider"] = provider
        if description is not OMIT:
            _request["description"] = description
        if template is not OMIT:
            _request["template"] = template
        if model_config is not OMIT:
            _request["model_config"] = model_config
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "promptVersions"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DefaultPostResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_prompt_version_by_id(self, id: str) -> PromptVersionRead:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"promptVersions/{id}"),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PromptVersionRead, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_prompt_version(
        self,
        id: str,
        *,
        status: typing.Optional[PromptVersionStatus] = OMIT,
        provider: typing.Optional[PromptVersionProviders] = OMIT,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        prompt_id: typing.Optional[str] = OMIT,
        template: typing.Optional[typing.List[ChatGptMessage]] = OMIT,
        model_config: typing.Optional[ChatGptChatCompletitionConfig] = OMIT,
    ) -> PromptVersionRead:
        _request: typing.Dict[str, typing.Any] = {}
        if status is not OMIT:
            _request["status"] = status
        if provider is not OMIT:
            _request["provider"] = provider
        if name is not OMIT:
            _request["name"] = name
        if description is not OMIT:
            _request["description"] = description
        if prompt_id is not OMIT:
            _request["prompt_id"] = prompt_id
        if template is not OMIT:
            _request["template"] = template
        if model_config is not OMIT:
            _request["model_config"] = model_config
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "PATCH",
                urllib.parse.urljoin(f"{self._environment}/", f"promptVersions/{id}"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {"Authorization": f"Bearer {self._token}" if self._token is not None else None}
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(PromptVersionRead, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
