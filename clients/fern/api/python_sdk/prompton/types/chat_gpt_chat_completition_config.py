# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .chat_gpt_chat_completition_config_stop import ChatGptChatCompletitionConfigStop


class ChatGptChatCompletitionConfig(pydantic.BaseModel):
    model: typing.Optional[str] = pydantic.Field(description=('<span style="white-space: nowrap">`non-empty`</span>\n'))
    temperature: typing.Optional[float]
    top_p: typing.Optional[float]
    stop: typing.Optional[ChatGptChatCompletitionConfigStop]
    max_tokens: typing.Optional[int]
    presence_penalty: typing.Optional[float]
    frequency_penalty: typing.Optional[float]
    logit_bias: typing.Optional[typing.Dict[str, int]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
