/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as PromptonApi from "../../..";
export declare namespace Orgs {
    interface Options {
        environment: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Orgs {
    protected readonly options: Orgs.Options;
    constructor(options: Orgs.Options);
    getOrgsList(): Promise<PromptonApi.OrgRead[]>;
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    addOrg(request: PromptonApi.OrgCreate): Promise<unknown>;
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.NotFoundError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    getCurrentUserOrg(): Promise<PromptonApi.OrgRead>;
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.NotFoundError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    getOrgById(id: string): Promise<PromptonApi.OrgRead>;
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.NotFoundError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    updateOrg(id: string, request?: PromptonApi.OrgUpdate): Promise<PromptonApi.OrgRead>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
