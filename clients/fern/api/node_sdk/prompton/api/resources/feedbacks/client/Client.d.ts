/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as PromptonApi from "../../..";
export declare namespace Feedbacks {
    interface Options {
        environment: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Feedbacks {
    protected readonly _options: Feedbacks.Options;
    constructor(_options: Feedbacks.Options);
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.NotFoundError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    getFeedbacksList(request?: PromptonApi.GetFeedbacksListRequest): Promise<PromptonApi.FeedbackRead[]>;
    /**
     * Feedback about an inference from an end user or from a PromptOn user.
     *
     * At least one of `score`, `flag` or `note` required
     *
     * `end_user_id` is null if from PromptOn user.
     *
     * `score` can be null if flagging or note only. Scoring method are for API consumer consideration. Eg. end users can thumbs down/up mapped to -1 +1 `score`, internal users rate between from 0 to 100.
     *
     * `flag` is any string when inference was flagged. Can be null if it is scoring or note only
     *
     * `feedback_for_part` is optional and can be used when the inference has multiple sections which require separate feedback.
     *
     * `metadata` is any dict for additional information.
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    addFeedback(request: PromptonApi.FeedbackCreate): Promise<PromptonApi.DefaultPostResponse>;
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.NotFoundError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    getFeedbackById(id: string): Promise<PromptonApi.FeedbackRead>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
