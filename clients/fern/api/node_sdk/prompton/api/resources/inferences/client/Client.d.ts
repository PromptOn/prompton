/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as core from "../../../../core";
import * as PromptonApi from "../../..";
export declare namespace Inferences {
    interface Options {
        environment: string;
        token?: core.Supplier<core.BearerToken | undefined>;
    }
}
export declare class Inferences {
    protected readonly options: Inferences.Options;
    constructor(options: Inferences.Options);
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.NotFoundError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    getInferencesList(request?: PromptonApi.GetInferencesListRequest): Promise<PromptonApi.InferenceRead[]>;
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    newInference(request: PromptonApi.InferenceCreate): Promise<PromptonApi.InferencePostResponse>;
    /**
     * @throws {@link PromptonApi.BadRequestError}
     * @throws {@link PromptonApi.UnauthorizedError}
     * @throws {@link PromptonApi.NotFoundError}
     * @throws {@link PromptonApi.UnprocessableEntityError}
     */
    getInferenceById(id: string): Promise<PromptonApi.InferenceRead>;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
